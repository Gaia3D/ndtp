plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'war'
}

group = 'com.ndtp'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

// gradle build -Pprofile=product (develop, test, local)
final String DEFAULT_PROFILE = 'local'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven {
        url "https://repo.osgeo.org/repository/release/"
    }
    maven {
        url "https://repo.boundlessgeo.com/main"
    }
	mavenCentral()
}

sourceSets {
    main {
        resources {
            if (!project.hasProperty('profile') || !profile) {
                println " ========== > default profile is local. "
                ext.profile = DEFAULT_PROFILE
            }

            if (profile == 'product') {
                println " ===========> profile file is ${profile}"
                println " ===========> copy from src/main/resources/product to src/main/resources"

                copy {
                    from("src/main/resources/product") {
                        include 'application.properties'
                        include 'ndtp.properties'
                        include 'logback-spring.xml'
                    }
                    into "src/main/resources"
                }
                exclude "**/develop/*"
            } else if (profile == 'develop') {
                println " ===========> profile file is ${profile}"
                println " ===========> copy from src/main/resources/develop to src/main/resources"

                copy {
                    from("src/main/resources/dev") {
                        include 'application.properties'
                        include 'ndtp.properties'
                        include 'logback-spring.xml'
                    }
                    into "src/main/resources"
                }
                exclude "**/product/*"
            } else {
                println " ===========> profile file is ${profile}"
                //srcDir "src/main/resources"
                exclude "**/product/*"
                exclude "**/develop/*"
            }
        }
    }
}

dependencies {
	implementation project(':common')
	
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	
	implementation 'org.springframework.security:spring-security-core:5.2.1.RELEASE'
	implementation 'org.apache.taglibs:taglibs-standard-jstlel:1.2.5'
	
	implementation 'org.apache.httpcomponents:httpclient'
	implementation 'org.apache.commons:commons-exec:1.3'
    implementation 'org.geotools:gt-shapefile:22.2'
    implementation 'org.geotools.xsd:gt-xsd-core:22.2'
    implementation 'org.geotools.xsd:gt-xsd-sld:22.2'
    implementation 'org.apache.commons:commons-compress:1.18'
	
	implementation 'org.modelmapper:modelmapper:2.3.6'
	
	runtimeOnly 'org.postgresql:postgresql'
	
	providedRuntime 'org.apache.tomcat.embed:tomcat-embed-jasper'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	
	//testImplementation 'org.springframework.boot:spring-boot-starter-test'
	
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	
	//testImplementation 'org.junit.jupiter:junit-jupiter-api'
	//testCompile 'org.junit.jupiter:junit-jupiter-params'
	//testRuntime 'org.junit.jupiter:junit-jupiter-engine'
    //implementation 'org.junit.platform:junit-platform-runner:1.6.0'
    //implementation 'org.junit.platform:junit-platform-launcher:1.6.0'
    //implementation 'org.junit.jupiter:junit-jupiter:5.6.0'
    //implementation 'org.junit.platform:junit-platform-commons:1.6.0'
    
    //implementation 'org.junit:junit-bom:5.6.0'
    
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

test {
	useJUnitPlatform()
	ignoreFailures = true
	//exclude '**/*'
}
