<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ndtp.persistence.UserDataGroupMapper">

	<!-- 사용자 데이터 그룹 총 건수 -->
	<select id="getUserDataGroupTotalCount" parameterType="userDataGroup" resultType="long">
		/* getUserDataGroupTotalCount */
		SELECT COUNT(user_data_group_id) 
		FROM user_data_group
		WHERE user_id = #{userId}
			<if test="userDataGroupId != null and userDataGroupId > 0">
			AND user_data_group_id = #{userDataGroupId}
			</if>
			<if test="sharing != null and sharing != ''">
			AND sharing = #{sharing}
			</if>
			<if test="basic != null">
			AND basic = #{basic}
			</if>
			<if test="searchWord != null and searchWord != '' and searchValue != null and searchValue != '' and searchOption == '0'.toString()">
			AND ${searchWord} = #{searchValue}
			</if>
			<if test="searchWord != null and searchWord != '' and searchValue != null and searchValue != '' and searchOption == '1'.toString()">
			AND ${searchWord} LIKE '%' || #{searchValue} || '%'
			</if>
			<if test="startDate != null and startDate != ''">
			<![CDATA[
			AND insert_date >= TO_TIMESTAMP(#{startDate}, 'YYYYMMDDHH24MISSUS')
			]]>
			</if>
			<if test="endDate != null and endDate != ''">
			<![CDATA[
			AND insert_date <= TO_TIMESTAMP(#{endDate}, 'YYYYMMDDHH24MISSUS')
			]]>
			</if>
	</select>

	<!-- 사용자 데이터 그룹 목록 조회 -->
	<select id="getAllListUserDataGroup" parameterType="userDataGroup" resultType="userDataGroup">
		/* getAllListUserDataGroup */
		WITH RECURSIVE user_data_group_tree (
			user_data_group_id, data_group_name, data_group_key, data_group_path, sharing, user_id, ancestor, parent, depth, view_order,
			children, basic, available, data_count, location, altitude, duration, location_update_type, metainfo, description, update_date, insert_date,
			path, cycle
		) AS (
	        SELECT A.user_data_group_id, A.data_group_name, A.data_group_key, A.data_group_path, A.sharing, A.user_id, A.ancestor, A.parent, A.depth, A.view_order,
	        	A.children, A.basic, A.available, A.data_count, A.location, A.altitude, A.duration, A.location_update_type, A.metainfo, A.description, A.update_date, A.insert_date,
	        	ARRAY[A.view_order], false
			FROM user_data_group A
			WHERE user_id = #{userId} AND A.parent = 0
			<if test="available != null">
				AND A.available = #{available}
			</if>
			UNION ALL
	        SELECT A.user_data_group_id, A.data_group_name, A.data_group_key, A.data_group_path, A.sharing, A.user_id, A.ancestor, A.parent, A.depth, A.view_order,
	        	A.children, A.basic, A.available, A.data_count, A.location, A.altitude, A.duration, A.location_update_type, A.metainfo, A.description, A.update_date, A.insert_date,
	        	path || A.view_order, A.user_data_group_id = ANY(path)
	        FROM user_data_group A, user_data_group_tree B
	        WHERE A.user_id = #{userId} AND A.parent = B.user_data_group_id AND not cycle
		)
	    SELECT user_data_group_id, data_group_name, data_group_key, data_group_path, sharing, user_id, ancestor, parent, depth, view_order,
	    	children, basic, available, data_count, location, altitude, duration, location_update_type, metainfo, description, update_date, insert_date,
	    	path
	    FROM user_data_group_tree
	    ORDER BY path
	</select>
	
	<!-- 사용자 데이터 그룹 목록 -->
	<select id="getListUserDataGroup" parameterType="userDataGroup" resultType="userDataGroup">
		/* getListUserDataGroup */
		SELECT *, ST_X(location) AS longitude, ST_Y(location) AS latitude
		FROM user_data_group
		WHERE user_id = #{userId}
			<if test="userDataGroupId != null and userDataGroupId > 0">
			AND user_data_group_id = #{userDataGroupId}
			</if>
			<if test="sharing != null and sharing != ''">
			AND sharing = #{sharing}
			</if>
			<if test="basic != null">
			AND basic = #{basic}
			</if>
			<if test="searchWord != null and searchWord != '' and searchValue != null and searchValue != '' and searchOption == '0'.toString()">
			AND ${searchWord} = #{searchValue}
			</if>
			<if test="searchWord != null and searchWord != '' and searchValue != null and searchValue != '' and searchOption == '1'.toString()">
			AND ${searchWord} LIKE '%' || #{searchValue} || '%'
			</if>
			<if test="startDate != null and startDate != ''">
			<![CDATA[
			AND insert_date >= TO_TIMESTAMP(#{startDate}, 'YYYYMMDDHH24MISSUS')
			]]>
			</if>
			<if test="endDate != null and endDate != ''">
			<![CDATA[
			AND insert_date <= TO_TIMESTAMP(#{endDate}, 'YYYYMMDDHH24MISSUS')
			]]>
			</if>
		<choose>
		<when test="orderWord != null and orderWord != '' and orderValue != null and orderValue != ''">
		ORDER BY ${orderWord} ${orderValue}
		</when>
		<otherwise>
		ORDER BY insert_date DESC, user_data_group_id DESC
		</otherwise>
		</choose>
		OFFSET #{offset} LIMIT #{limit}
	</select>
	
	<!-- 사용자 데이터 그룹 정보 -->
	<select id="getUserDataGroup" parameterType="userDataGroup" resultType="userDataGroup">
		/* getUserDataGroup */
		SELECT * 
		FROM user_data_group 
		WHERE user_data_group_id = #{userDataGroupId} 
			AND user_id = #{userId}
	</select>
	
	<!-- 사용자 기본 데이터 그룹 정보 -->
	<select id="getBasicUserDataGroup" parameterType="userDataGroup" resultType="userDataGroup">
		/* getBasicUserDataGroup */
		SELECT * 
		FROM user_data_group 
		WHERE user_id = #{userId}
			AND data_group_key = 'basic'
			AND basic = 'true' 
			AND depth = 1
		ORDER BY view_order
		LIMIT 1 
	</select>
	
	<!-- 부모와 순서를 가지고 사용자 데이터 그룹 정보를 취득 -->
	<select id="getUserDataGroupByParentAndViewOrder" parameterType="userDataGroup" resultType="userDataGroup">
		/* getUserDataGroupByParentAndViewOrder */
		SELECT * 
		FROM user_data_group 
		WHERE user_id = #{userId}
			AND parent = #{parent} 
		<if test="updateType == 'UP'.toString()">
			<![CDATA[
			AND view_order < #{viewOrder}
			]]>
		ORDER BY view_order DESC 
		</if>
		<if test="updateType == 'DOWN'.toString()">
			<![CDATA[
			AND view_order > #{viewOrder}
			]]>
		ORDER BY view_order 
		</if>
		LIMIT 1 
	</select>
	
	<!-- 사용자 데이터 그룹 Key 중복 확인 -->
	<select id="isDataGroupKeyDuplication" parameterType="userDataGroup" resultType="boolean">
		/* isDataGroupKeyDuplication */
		SELECT 
			CASE 
				WHEN COUNT(*) > 0 THEN true
				ELSE false
			END AS duplication
		FROM user_data_group
		WHERE user_id = #{userId}
			AND data_group_key = #{dataGroupKey}
	</select>
	
	<!-- 사용자 데이터 그룹 등록 -->
	<insert id="insertUserDataGroup" parameterType="userDataGroup">
		/* insertUserDataGroup */
		<selectKey keyProperty="userDataGroupId" resultType="int" order="BEFORE">
    		SELECT NEXTVAL('user_data_group_seq')
  		</selectKey>
		INSERT INTO user_data_group (
			user_data_group_id, data_group_name, data_group_key, 
			data_group_path, sharing, user_id, ancestor, parent, depth, view_order, children, basic, available, data_count, 
			<if test="location != null">
			location,
			</if>
			altitude, duration, location_update_type,
			<if test="metainfo != null and metainfo != ''">
			metainfo,
			</if>
			description
		) VALUES (
			#{userDataGroupId}, #{dataGroupName}, #{dataGroupKey}, 
			#{dataGroupPath}, #{sharing}, #{userId},
			(
				SELECT COALESCE(MAX(ancestor), #{userDataGroupId}) 
				FROM user_data_group 
				WHERE user_data_group_id = #{parent}
					AND user_data_group_id != 0
			),
			#{parent},
			(
				SELECT COALESCE(MAX(depth),  0 ) + 1
				FROM user_data_group 
				WHERE user_data_group_id = #{parent}
			),
			(
				SELECT COALESCE(MAX(view_order), 0) + 1
				FROM user_data_group
				WHERE parent = #{parent}
			),
			(
				SELECT COUNT(*) 
				FROM user_data_group
				WHERE parent = #{userDataGroupId}
			),
			#{basic}, #{available}, COALESCE(#{dataCount}, 0),
			<if test="location != null">
			ST_GeographyFromText(#{location}),
			</if>
			#{altitude}, #{duration}, #{locationUpdateType},
			<if test="metainfo != null and metainfo != ''">
			TO_JSON(#{metainfo}::json),
			</if>
			trim(#{description})
		)
	</insert>
	
	<!-- 기본 사용자 데이터 그룹 등록 -->
	<insert id="insertBasicUserDataGroup" parameterType="userDataGroup">
		/* insertBasicUserDataGroup */
		<selectKey keyProperty="userDataGroupId" resultType="int" order="BEFORE">
    		SELECT NEXTVAL('user_data_group_seq')
  		</selectKey>
		INSERT INTO user_data_group (
			user_data_group_id, data_group_name, data_group_key, data_group_path, sharing, user_id, 
			ancestor, parent, depth, view_order, children, basic, available, data_count, 
			<if test="location != null">
			location,
			</if>
			altitude, duration,
			<if test="metainfo != null and metainfo != ''">
			metainfo,
			</if>
			description
		) VALUES (
			#{userDataGroupId}, #{dataGroupName}, #{dataGroupKey}, #{dataGroupPath}, #{sharing}, #{userId},
			#{userDataGroupId}, 0, 1, 1, 0, true, true, 0,
			<if test="location != null">
			ST_GeographyFromText(#{location}),
			</if>
			#{altitude}, #{duration}, 
			<if test="metainfo != null and metainfo != ''">
			TO_JSON(#{metainfo}::json),
			</if>
			trim(#{description})
		)
	</insert>
	
	<!-- 사용자 데이터 그룹 수정 -->
	<update id="updateUserDataGroup" parameterType="userDataGroup">
		/* updateUserDataGroup */
		UPDATE user_data_group
		SET 
			<if test="dataGroupName != null and dataGroupName != ''">
			data_group_name = #{dataGroupName},
			</if>
			<if test="dataGroupKey != null and dataGroupKey != ''">
			data_group_key = #{dataGroupKey},
			</if>
			<if test="dataGroupPath != null and dataGroupPath != ''">
			data_group_path = #{dataGroupPath},
			</if>
			<if test="sharing != null and sharing != ''">
			sharing = #{sharing},
			</if>
			<if test="userId != null and userId != ''">
			user_id = #{userId},
			</if>
			<if test="ancestor != null and ancestor gt 0">
			ancestor = #{ancestor},
			</if>
			<if test="parent != null and parent gt 0">
			parent = #{parent},
			</if>
			<if test="depth != null and depth gt 0">
			depth = #{depth},
			</if>
			<if test="viewOrder != null and viewOrder gt 0">
			view_order = #{viewOrder},
			</if>
			<if test="children != null and children gte 0">
			children = #{children},
			</if>
			<if test="basic != null">
			basic = #{basic},
			</if>
			<if test="available != null">
			available = #{available},
			</if>
			<if test="dataCount != null and dataCount gte 0">
			data_count = #{dataCount},
			</if>
			<if test="location != null">
			location = ST_GeographyFromText(#{location}),
			</if>
			<if test="altitude != null">
			altitude = #{altitude},
			</if>
			<if test="duration != null">
			duration = #{duration},
			</if>
			<if test="locationUpdateType != null and locationUpdateType != ''">
			location_update_type = #{locationUpdateType},
			</if>
			<if test="metainfo != null and metainfo != ''">
			metainfo = TO_JSON(#{metainfo}::json),
			</if>
			<if test="description != null and description != ''">
			description = #{description},
			</if>
			update_date = NOW()
		WHERE user_data_group_id = #{userDataGroupId}
			AND user_id = #{userId}
	</update>
	
	<!-- 사용자 데이터 그룹 순서 수정 -->
	<update id="updateUserDataGroupViewOrder" parameterType="userDataGroup">
		/* updateUserDataGroupViewOrder */
		UPDATE user_data_group 
		SET view_order = #{viewOrder} 
		WHERE user_data_group_id = #{userDataGroupId}
			AND user_id = #{userId}
	</update>
	
	<!-- 사용자 데이터 그룹 삭제 -->
	<delete id="deleteUserDataGroup" parameterType="userDataGroup">
		/* deleteUserDataGroup */
		DELETE 
		FROM user_data_group 
		WHERE user_data_group_id = #{userDataGroupId} 
			AND user_id = #{userId}
	</delete>
	
	<!-- ancestor를 이용하여 사용자 데이터 그룹 삭제 -->
	<delete id="deleteUserDataGroupByAncestor" parameterType="userDataGroup">
		/* deleteUserDataGroupByAncestor */
		DELETE 
		FROM user_data_group 
		WHERE ancestor = #{userDataGroupId} 
			AND user_id = #{userId}
	</delete>
	
	<!-- parent를 이용하여 사용자 데이터 그룹 삭제 -->
	<delete id="deleteUserDataGroupByParent" parameterType="userDataGroup">
		/* deleteUserDataGroupByParent */
		DELETE 
		FROM user_data_group 
		WHERE parent = #{userDataGroupId} 
			AND user_id = #{userId}
	</delete>
</mapper>