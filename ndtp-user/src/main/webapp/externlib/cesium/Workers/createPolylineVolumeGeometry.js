/**
 * Cesium - https://github.com/CesiumGS/cesium
 *
 * Copyright 2011-2020 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./defined-b9ff0e39","./Check-e6691f86","./freezeObject-2d5b18ce","./defaultValue-199f5aa8","./Math-92bd3539","./Cartesian2-12797039","./Transforms-1175e52c","./RuntimeError-d5522ee3","./WebGLConstants-1819379c","./ComponentDatatype-a270fa7e","./GeometryAttribute-9396e1af","./when-c208a7cf","./GeometryAttributes-c3465b51","./AttributeCompression-5ee93a38","./GeometryPipeline-03f56e11","./EncodedCartesian3-9ab2586f","./IndexDatatype-d9fd3d17","./IntersectionTests-e0f27278","./Plane-9e603d64","./VertexFormat-b4c6d1c2","./arrayRemoveDuplicates-1efed288","./BoundingRectangle-96022c82","./EllipsoidTangentPlane-ba96ba3d","./EllipsoidRhumbLine-078646a4","./PolygonPipeline-7c2859c5","./PolylineVolumeGeometryLibrary-d3f9c65b","./EllipsoidGeodesic-220adcef","./PolylinePipeline-c1da261a"],function(c,e,t,u,i,g,G,n,r,A,R,a,D,o,I,l,O,s,d,y,p,m,h,f,S,v,b,E){"use strict";var P={};function B(e,t){c.defined(P[e])||(P[e]=!0,console.warn(u.defaultValue(t,e)))}function _(e){var t=(e=u.defaultValue(e,u.defaultValue.EMPTY_OBJECT)).polylinePositions,n=e.shapePositions;this._positions=t,this._shape=n,this._ellipsoid=g.Ellipsoid.clone(u.defaultValue(e.ellipsoid,g.Ellipsoid.WGS84)),this._cornerType=u.defaultValue(e.cornerType,v.CornerType.ROUNDED),this._vertexFormat=y.VertexFormat.clone(u.defaultValue(e.vertexFormat,y.VertexFormat.DEFAULT)),this._granularity=u.defaultValue(e.granularity,i.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";var r=1+t.length*g.Cartesian3.packedLength;r+=1+n.length*g.Cartesian2.packedLength,this.packedLength=r+g.Ellipsoid.packedLength+y.VertexFormat.packedLength+2}B.geometryOutlines="Entity geometry outlines are unsupported on terrain. Outlines will be disabled. To enable outlines, disable geometry terrain clamping by explicitly setting height to 0.",B.geometryZIndex="Entity geometry with zIndex are unsupported when height or extrudedHeight are defined.  zIndex will be ignored",B.geometryHeightReference="Entity corridor, ellipse, polygon or rectangle with heightReference must also have a defined height.  heightReference will be ignored",B.geometryExtrudedHeightReference="Entity corridor, ellipse, polygon or rectangle with extrudedHeightReference must also have a defined extrudedHeight.  extrudedHeightReference will be ignored",_.pack=function(e,t,n){var r;n=u.defaultValue(n,0);var i=e._positions,a=i.length;for(t[n++]=a,r=0;r<a;++r,n+=g.Cartesian3.packedLength)g.Cartesian3.pack(i[r],t,n);var o=e._shape;for(a=o.length,t[n++]=a,r=0;r<a;++r,n+=g.Cartesian2.packedLength)g.Cartesian2.pack(o[r],t,n);return g.Ellipsoid.pack(e._ellipsoid,t,n),n+=g.Ellipsoid.packedLength,y.VertexFormat.pack(e._vertexFormat,t,n),n+=y.VertexFormat.packedLength,t[n++]=e._cornerType,t[n]=e._granularity,t};var x=g.Ellipsoid.clone(g.Ellipsoid.UNIT_SPHERE),k=new y.VertexFormat,V={polylinePositions:void 0,shapePositions:void 0,ellipsoid:x,vertexFormat:k,cornerType:void 0,granularity:void 0};_.unpack=function(e,t,n){var r;t=u.defaultValue(t,0);var i=e[t++],a=new Array(i);for(r=0;r<i;++r,t+=g.Cartesian3.packedLength)a[r]=g.Cartesian3.unpack(e,t);i=e[t++];var o=new Array(i);for(r=0;r<i;++r,t+=g.Cartesian2.packedLength)o[r]=g.Cartesian2.unpack(e,t);var l=g.Ellipsoid.unpack(e,t,x);t+=g.Ellipsoid.packedLength;var s=y.VertexFormat.unpack(e,t,k);t+=y.VertexFormat.packedLength;var d=e[t++],p=e[t];return c.defined(n)?(n._positions=a,n._shape=o,n._ellipsoid=g.Ellipsoid.clone(l,n._ellipsoid),n._vertexFormat=y.VertexFormat.clone(s,n._vertexFormat),n._cornerType=d,n._granularity=p,n):(V.polylinePositions=a,V.shapePositions=o,V.cornerType=d,V.granularity=p,new _(V))};var C=new m.BoundingRectangle;return _.createGeometry=function(e){var t=e._positions,n=p.arrayRemoveDuplicates(t,g.Cartesian3.equalsEpsilon),r=e._shape;if(r=v.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(r),!(n.length<2||r.length<3)){S.PolygonPipeline.computeWindingOrder2D(r)===S.WindingOrder.CLOCKWISE&&r.reverse();var i=m.BoundingRectangle.fromPoints(r,C);return function(e,t,n,r){var i=new D.GeometryAttributes;r.position&&(i.position=new R.GeometryAttribute({componentDatatype:A.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));var a,o,l,s,d,p,c=t.length,u=e.length/3,g=(u-2*c)/(2*c),y=S.PolygonPipeline.triangulate(t),m=(g-1)*c*6+2*y.length,h=O.IndexDatatype.createTypedArray(u,m),f=2*c,v=0;for(a=0;a<g-1;a++){for(o=0;o<c-1;o++)p=(l=2*o+a*c*2)+f,d=(s=l+1)+f,h[v++]=s,h[v++]=l,h[v++]=d,h[v++]=d,h[v++]=l,h[v++]=p;d=(s=(l=2*c-2+a*c*2)+1)+f,p=l+f,h[v++]=s,h[v++]=l,h[v++]=d,h[v++]=d,h[v++]=l,h[v++]=p}if(r.st||r.tangent||r.bitangent){var b,E,P=new Float32Array(2*u),_=1/(g-1),x=1/n.height,k=n.height/2,V=0;for(a=0;a<g;a++){for(b=a*_,E=x*(t[0].y+k),P[V++]=b,P[V++]=E,o=1;o<c;o++)E=x*(t[o].y+k),P[V++]=b,P[V++]=E,P[V++]=b,P[V++]=E;E=x*(t[0].y+k),P[V++]=b,P[V++]=E}for(o=0;o<c;o++)b=0,E=x*(t[o].y+k),P[V++]=b,P[V++]=E;for(o=0;o<c;o++)b=(g-1)*_,E=x*(t[o].y+k),P[V++]=b,P[V++]=E;i.st=new R.GeometryAttribute({componentDatatype:A.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(P)})}var C=u-2*c;for(a=0;a<y.length;a+=3){var L=y[a]+C,w=y[a+1]+C,F=y[a+2]+C;h[v++]=L,h[v++]=w,h[v++]=F,h[v++]=F+c,h[v++]=w+c,h[v++]=L+c}var T=new R.Geometry({attributes:i,indices:h,boundingSphere:G.BoundingSphere.fromVertices(e),primitiveType:R.PrimitiveType.TRIANGLES});if(r.normal&&(T=I.GeometryPipeline.computeNormal(T)),r.tangent||r.bitangent){try{T=I.GeometryPipeline.computeTangentAndBitangent(T)}catch(e){B("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}r.tangent||(T.attributes.tangent=void 0),r.bitangent||(T.attributes.bitangent=void 0),r.st||(T.attributes.st=void 0)}return T}(v.PolylineVolumeGeometryLibrary.computePositions(n,r,i,e,!0),r,i,e._vertexFormat)}},function(e,t){return c.defined(t)&&(e=_.unpack(e,t)),e._ellipsoid=g.Ellipsoid.clone(e._ellipsoid),_.createGeometry(e)}});
